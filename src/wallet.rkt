#lang racket

;the structure of a wallet include a private key and a public key
(struct wallet
  (private-key public-key)
  #:prefab)

; Make wallet by generating random public and private keys.
; make-wallet : -> wallet for only one user
(define (make-wallet)
  ;letrec is used to define a group of variables that are mutually recursive
  ;rsa-impl is the implementation of the RSA algorithm in the library crypto and get-pk is used to get the implementation of the RSA algorithm from the library crypto 'rsa is the name of the algorithm and libcrypto-factory is the name of the library
  ;privkey is the private key generated by the RSA algorithm
  ; generate-private-key is used to generate a private key for the RSA algorithm and rsa-impl is the implementation of the RSA algorithm and '((nbits 512)) is the number of bits in the private key
  ;pubkey is the public key generated by the RSA algorithm
  (letrec ([rsa-impl (get-pk 'rsa libcrypto-factory)]
           [privkey (generate-private-key rsa-impl '((nbits 512)))]
           [pubkey (pk-key->public-only-key privkey)])
    (wallet (bytes->hex-string
             (pk-key->datum privkey 'PrivateKeyInfo))
            (bytes->hex-string
             (pk-key->datum pubkey 'SubjectPublicKeyInfo)))))

(require crypto)
(require crypto/all)

(provide (struct-out wallet) make-wallet)
